/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import com.github.jengelman.gradle.plugins.shadow.ShadowBasePlugin

plugins {
    id 'com.github.johnrengelman.shadow'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
}

apply plugin: 'opensearch.java'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.plugin.allopen'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier.set 'javadoc'
    from javadoc.destinationDir
    dependsOn javadoc
}

dependencies {
    compileOnly "org.opensearch:opensearch:${opensearch_version}"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    implementation "com.amazonaws:aws-java-sdk-core:${aws_version}"
    implementation "com.amazonaws:aws-java-sdk-ses:${aws_version}"
    implementation "org.apache.httpcomponents.core5:httpcore5:${versions.httpcore5}"
    implementation "org.apache.httpcomponents.client5:httpclient5:${versions.httpclient5}"
    implementation "com.github.seancfoley:ipaddress:5.3.3"
    implementation "commons-validator:commons-validator:1.7"

    testImplementation(
            "io.mockk:mockk:1.11.0",
            "io.mockk:mockk-common:1.11.0",
            "io.mockk:mockk-dsl:1.11.0",
            "io.mockk:mockk-dsl-jvm:1.11.0",
            "io.mockk:mockk-agent-api:1.11.0",
            "io.mockk:mockk-agent-common:1.11.0",
            "io.mockk:mockk-agent-jvm:1.11.0",
            "org.junit.jupiter:junit-jupiter-api:5.6.2",
            "org.junit.jupiter:junit-jupiter-params:5.6.2",
            "org.mockito:mockito-junit-jupiter:3.10.0",
    )
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.6.2')
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}" // required by mockk
    testImplementation "net.bytebuddy:byte-buddy-agent:${versions.bytebuddy}"
    testImplementation "org.opensearch.test:framework:${opensearch_version}"
}

configurations.all {
    if (it.state != Configuration.State.UNRESOLVED) return
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
        force "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
        force "commons-logging:commons-logging:${versions.commonslogging}" // resolve for amazonaws
        force "commons-codec:commons-codec:1.13" // resolve for amazonaws
        force "org.apache.httpcomponents.client5:httpclient5:${versions.httpclient5}" // resolve for amazonaws
        force "org.apache.httpcomponents.core5:httpcore5:${versions.httpcore5}" // resolve for amazonaws
        force "joda-time:joda-time:2.8.1" // Resolve for amazonaws
        force "com.fasterxml.jackson.core:jackson-core:2.11.4" // resolve for amazonaws
        force "com.fasterxml.jackson.core:jackson-annotations:2.11.4" // resolve for amazonaws
        force "com.fasterxml.jackson.core:jackson-databind:2.11.4" // resolve for amazonaws
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.4" // resolve for amazonaws
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.11.4" // resolve for amazonaws
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.4" // resolve for amazonaws
        force "junit:junit:4.13.2" // resolve for amazonaws
    }
}

publishing {
    publications {
        shadow(MavenPublication) {
            project.shadow.component(it)
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "OpenSearch Notifications SPI"
                packaging = "jar"
                url = "https://github.com/opensearch-project/notifications"
                description = "OpenSearch Notifications SPI"
                scm {
                    connection = "scm:git@github.com:opensearch-project/notifications.git"
                    developerConnection = "scm:git@github.com:opensearch-project/notifications.git"
                    url = "git@github.com:opensearch-project/notifications.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "amazonwebservices"
                        organization = "Amazon Web Services"
                        organizationUrl = "https://aws.amazon.com"
                    }
                }
            }
        }
    }

    gradle.startParameter.setShowStacktrace(ShowStacktrace.ALWAYS)
    gradle.startParameter.setLogLevel(LogLevel.DEBUG)

    signing {
        required { gradle.taskGraph.hasTask("publishShadowPublicationToSonatype-stagingRepository") }
        sign publishing.publications.shadow
    }
}

test {
    useJUnitPlatform()
    doFirst {
        // reverse operation of https://github.com/elastic/elasticsearch/blob/7.6/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy#L736-L743
        // to fix the classpath for unit tests
        test.classpath -= project.files(project.tasks.named('shadowJar'))
        test.classpath -= project.configurations.getByName(ShadowBasePlugin.CONFIGURATION_NAME)
        test.classpath += project.extensions.getByType(SourceSetContainer).getByName(SourceSet.MAIN_SOURCE_SET_NAME).runtimeClasspath
    }
    // add "-Dtests.security.manager=false" to VM options if you want to run integ tests in IntelliJ
    systemProperty 'tests.security.manager', 'false'
}

shadowJar {
    // fix jarhell by relocating packages
    relocate 'org.joda.time', 'org.opensearch.notifications.core.repackage.org.joda.time'
    relocate 'com.fasterxml.jackson', 'org.opensearch.notifications.core.repackage.com.fasterxml.jackson'
    relocate 'org.apache.http', 'org.opensearch.notifications.core.repackage.org.apache.http'
    relocate 'org.apache.hc', 'org.opensearch.notifications.core.repackage.org.apache.hc'
    relocate 'org.apache.commons.logging', 'org.opensearch.notifications.core.repackage.org.apache.commons.logging'
    relocate 'org.apache.commons.codec', 'org.opensearch.notifications.core.repackage.org.apache.commons.codec'
    relocate 'com.amazonaws', 'org.opensearch.notifications.core.repackage.com.amazonaws'
    relocate 'software.amazon.ion', 'org.opensearch.notifications.core.repackage.software.amazon.ion'
    archiveClassifier.set('')
}
